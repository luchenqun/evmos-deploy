import { Wallet } from "@ethersproject/wallet";
import { ethToEvmos } from "@tharsis/address-converter";
import { exec } from "child_process";
import download from "download";
import fs from "fs-extra";
import path from "path";
import os from "os";
import util from "util";
import _yargs from "yargs";
import { hideBin } from "yargs/helpers";
import TenderKeys from "./tenderKeys.js";
import { ethToBech32 } from "./utils.js";

const yargs = _yargs(hideBin(process.argv)); // https://github.com/yargs/yargs/issues/1854#issuecomment-787509517
let argv = yargs
  .option("n", {
    alias: "nohup",
    demandOption: false,
    default: true,
    describe: "Whether the startup script is nohup",
    type: "bool",
  })
  .option("c", {
    alias: "compile",
    demandOption: false,
    default: false,
    describe: "Whether compile code",
    type: "bool",
  })
  .option("v", {
    alias: "validators",
    demandOption: false,
    default: 4,
    describe: "Number of validators to initialize the testnet with (default 4)",
    type: "number",
  })
  .option("cn", {
    alias: "commonNode",
    demandOption: false,
    default: 0,
    describe: "Number of common node to initialize the testnet with (default 0)",
    type: "number",
  })
  .option("p", {
    alias: "platform",
    demandOption: false,
    default: "",
    describe: "platform(darwin,linux,win32)",
    type: "string",
  })
  .option("s", {
    alias: "start",
    demandOption: false,
    default: false,
    describe: "Whether after initialize immediate start",
    type: "bool",
  })
  .number(["v"])
  .number(["cn"])
  .boolean(["n", "c", "s"]).argv;

const isNohup = argv.nohup;
const isStart = argv.start;
const isCompile = argv.compile;
const commonNode = argv.commonNode;
const validators = argv.validators;
const nodesCount = validators + commonNode;
const platform = argv.platform ? argv.platform : process.platform;
const arch = os.arch();
const execPromis = util.promisify(exec);
const curDir = process.cwd();
const nodesDir = path.join(curDir, "nodes");
const evmosd = platform == "win32" ? "evmosd.exe" : "evmosd";
const gaiad = platform == "win32" ? "gaiad.exe" : "gaiad";
const gaiadCmd = platform == "win32" ? "gaiad.exe" : "./gaiad";
const gaiaHome = "./nodes/gaia";
const gaiaChainId = "cosmoshub-test";
let gaiaP2pPort = 16656;
let quarixChainId = "quarix_88888888-1";
const rly = platform == "win32" ? "rly.exe" : "rly";
const rlyCmd = platform == "win32" ? "rly.exe" : "./rly";
const rlyHome = "./nodes/relayer";
let rlyCfg = `
global:
    api-listen-addr: :5183
    timeout: 10s
    memo: "rly"
    light-cache-size: 20
chains:
    ibc-0:
        type: cosmos
        value:
            key: testkey
            chain-id: ${quarixChainId}
            rpc-addr: http://localhost:26657
            account-prefix: evmos
            keyring-backend: test
            gas-adjustment: 1.5
            gas-prices: 1aqare
            min-gas-amount: 0
            debug: true
            timeout: 10s
            output-format: json
            sign-mode: direct
    ibc-1:
        type: cosmos
        value:
            key: testkey
            chain-id: cosmoshub-test
            rpc-addr: http://localhost:16657
            account-prefix: cosmos
            keyring-backend: test
            gas-adjustment: 1.5
            gas-prices: 0uatom
            min-gas-amount: 0
            debug: true
            timeout: 10s
            output-format: json
            sign-mode: direct
paths:
    demo:
        src:
            chain-id: ${quarixChainId}
        dst:
            chain-id: cosmoshub-test
        src-channel-filter:
            rule: ""
            channel-list: []
`;

const ibcTransfer = `
#!/bin/bash

./rly tx link demo --client-tp 500s -d -t 3s --home ./relayer
sleep 5

echo "==================>before transfer"
./rly q bal ibc-0 --home ./relayer
./rly q bal ibc-1 --home ./relayer

./rly tx transfer ibc-0 ibc-1 5000000000000000000aqrx "$(./rly keys show ibc-1 --home ./relayer)" channel-0 -d --home ./relayer
sleep 5
./rly tx relay-packets demo channel-0 -d --home ./relayer
sleep 5
./rly tx relay-acknowledgements demo channel-0 -d --home ./relayer
sleep 5

echo "==================>after transfer"
./rly q bal ibc-0 --home ./relayer
./rly q bal ibc-1 --home ./relayer


./rly tx transfer ibc-1 ibc-0 2000000000000000000transfer/channel-0/aqrx "$(rly keys show ibc-0 --home ./relayer)" channel-0 -d --home ./relayer
sleep 5
./rly tx relay-packets demo channel-0 -d --home ./relayer
sleep 5
./rly tx relay-acknowledgements demo channel-0 -d --home ./relayer
sleep 5

echo "==================>back transfer"
./rly q bal ibc-0 --home ./relayer
./rly q bal ibc-1 --home ./relayer

./rly tx transfer ibc-1 ibc-0 1000000000000000000uatom "$(./rly keys show ibc-0 --home ./relayer)" channel-0 -d --home ./relayer
sleep 5
./rly tx relay-packets demo channel-0 -d --home ./relayer
sleep 5
./rly tx relay-acknowledgements demo channel-0 -d --home ./relayer
sleep 5
`;

let clientCfg = `
# The network chain ID
chain-id = "${quarixChainId}"
# The keyring's backend, where the keys are stored (os|file|kwallet|pass|test|memory)
keyring-backend = "test"
# CLI output format (text|json)
output = "text"
# <host>:<port> to Tendermint RPC interface for this chain
node = "tcp://localhost:26657"
# Transaction broadcasting mode (sync|async|block)
broadcast-mode = "sync"
`;
const scriptStop = path.join(nodesDir, platform == "win32" ? "stopAll.vbs" : "stopAll.sh");
const scriptStart = path.join(nodesDir, platform == "win32" ? "startAll.vbs" : "startAll.sh");
const tenderKeys = new TenderKeys();
const sleep = (time) => {
  return new Promise((resolve) => setTimeout(resolve, time));
};
const evmAccounts = [
  {
    "address": "0x0000000000000000000000000000000000000000",
    "code": "",
    "storage": []
  },
  {
    "address": "0x00000Be6819f41400225702D32d3dd23663Dd690",
    "code": "",
    "storage": []
  },
  {
    "address": "0x1111111111111111111111111111111111111111",
    "code": "60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461012857806399a88ec414610144578063f2fde38b1461016d578063f3b7dead146101965761007b565b8063204e1c7a14610080578063715018a6146100bd5780637eff275e146100d45780638da5cb5b146100fd575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a291906106f2565b6101d3565b6040516100b49190610740565b60405180910390f35b3480156100c957600080fd5b506100d2610267565b005b3480156100e057600080fd5b506100fb60048036038101906100f69190610787565b61027b565b005b34801561010957600080fd5b506101126102f2565b60405161011f9190610740565b60405180910390f35b610142600480360381019061013d919061090d565b61031b565b005b34801561015057600080fd5b5061016b60048036038101906101669190610787565b610396565b005b34801561017957600080fd5b50610194600480360381019061018f919061097c565b61040d565b005b3480156101a257600080fd5b506101bd60048036038101906101b891906106f2565b610490565b6040516101ca9190610740565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff166040516101fb90610a00565b600060405180830381855afa9150503d8060008114610236576040519150601f19603f3d011682016040523d82523d6000602084013e61023b565b606091505b50915091508161024a57600080fd5b8080602001905181019061025e9190610a41565b92505050919050565b61026f610524565b61027960006105a2565b565b610283610524565b8173ffffffffffffffffffffffffffffffffffffffff16638f283970826040518263ffffffff1660e01b81526004016102bc9190610740565b600060405180830381600087803b1580156102d657600080fd5b505af11580156102ea573d6000803e3d6000fd5b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610323610524565b8273ffffffffffffffffffffffffffffffffffffffff16634f1ef2863484846040518463ffffffff1660e01b815260040161035f929190610aed565b6000604051808303818588803b15801561037857600080fd5b505af115801561038c573d6000803e3d6000fd5b5050505050505050565b61039e610524565b8173ffffffffffffffffffffffffffffffffffffffff16633659cfe6826040518263ffffffff1660e01b81526004016103d79190610740565b600060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b505050505050565b610415610524565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b90610ba0565b60405180910390fd5b61048d816105a2565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff166040516104b890610c0c565b600060405180830381855afa9150503d80600081146104f3576040519150601f19603f3d011682016040523d82523d6000602084013e6104f8565b606091505b50915091508161050757600080fd5b8080602001905181019061051b9190610a41565b92505050919050565b61052c610666565b73ffffffffffffffffffffffffffffffffffffffff1661054a6102f2565b73ffffffffffffffffffffffffffffffffffffffff16146105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790610c6d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ad82610682565b9050919050565b60006106bf826106a2565b9050919050565b6106cf816106b4565b81146106da57600080fd5b50565b6000813590506106ec816106c6565b92915050565b60006020828403121561070857610707610678565b5b6000610716848285016106dd565b91505092915050565b600061072a82610682565b9050919050565b61073a8161071f565b82525050565b60006020820190506107556000830184610731565b92915050565b6107648161071f565b811461076f57600080fd5b50565b6000813590506107818161075b565b92915050565b6000806040838503121561079e5761079d610678565b5b60006107ac858286016106dd565b92505060206107bd85828601610772565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61081a826107d1565b810181811067ffffffffffffffff82111715610839576108386107e2565b5b80604052505050565b600061084c61066e565b90506108588282610811565b919050565b600067ffffffffffffffff821115610878576108776107e2565b5b610881826107d1565b9050602081019050919050565b82818337600083830152505050565b60006108b06108ab8461085d565b610842565b9050828152602081018484840111156108cc576108cb6107cc565b5b6108d784828561088e565b509392505050565b600082601f8301126108f4576108f36107c7565b5b813561090484826020860161089d565b91505092915050565b60008060006060848603121561092657610925610678565b5b6000610934868287016106dd565b935050602061094586828701610772565b925050604084013567ffffffffffffffff8111156109665761096561067d565b5b610972868287016108df565b9150509250925092565b60006020828403121561099257610991610678565b5b60006109a084828501610772565b91505092915050565b600081905092915050565b7f5c60da1b00000000000000000000000000000000000000000000000000000000600082015250565b60006109ea6004836109a9565b91506109f5826109b4565b600482019050919050565b6000610a0b826109dd565b9150819050919050565b610a1e816106a2565b8114610a2957600080fd5b50565b600081519050610a3b81610a15565b92915050565b600060208284031215610a5757610a56610678565b5b6000610a6584828501610a2c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aa8578082015181840152602081019050610a8d565b60008484015250505050565b6000610abf82610a6e565b610ac98185610a79565b9350610ad9818560208601610a8a565b610ae2816107d1565b840191505092915050565b6000604082019050610b026000830185610731565b8181036020830152610b148184610ab4565b90509392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610b8a602683610b1d565b9150610b9582610b2e565b604082019050919050565b60006020820190508181036000830152610bb981610b7d565b9050919050565b7ff851a44000000000000000000000000000000000000000000000000000000000600082015250565b6000610bf66004836109a9565b9150610c0182610bc0565b600482019050919050565b6000610c1782610be9565b9150819050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c57602083610b1d565b9150610c6282610c21565b602082019050919050565b60006020820190508181036000830152610c8681610c4a565b905091905056fea264697066735822122036889ee2aacbb15a33e67e797b140a29d3a4e4b06a0cc01cc873d066fd2e717864736f6c63430008130033",
    "storage": [
      {
        "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "value": "0x000000000000000000000000bf657d0ef7b48167657a703ed8fd063f075246d7"
      }
    ]
  },
  {
    "address": "0x2222222222222222222222222222222222222222",
    "code": "60806040526004361061004e5760003560e01c80633659cfe6146100675780634f1ef286146100835780635c60da1b1461009f5780638f283970146100bd578063f851a440146100d95761005d565b3661005d5761005b6100f7565b005b6100656100f7565b005b610081600480360381019061007c9190610916565b610111565b005b61009d600480360381019061009891906109a8565b61017f565b005b6100a761021c565b6040516100b49190610a17565b60405180910390f35b6100d760048036038101906100d29190610916565b61027b565b005b6100e16102d7565b6040516100ee9190610a17565b60405180910390f35b6100ff610336565b61010f61010a6103b5565b6103c4565b565b6101196103ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361017357610153610441565b61016e81604051806020016040528060008152506000610450565b61017c565b61017b6100f7565b5b50565b6101876103ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361020e576102098383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506001610450565b610217565b6102166100f7565b5b505050565b60006102266103ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361026f57610260610441565b6102686103b5565b9050610278565b6102776100f7565b5b90565b6102836103ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102cb576102bd610441565b6102c68161047c565b6102d4565b6102d36100f7565b5b50565b60006102e16103ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361032a5761031b610441565b6103236103ea565b9050610333565b6103326100f7565b5b90565b61033e6103ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a290610adb565b60405180910390fd5b6103b36104c8565b565b60006103bf6104ca565b905090565b3660008037600080366000845af43d6000803e80600081146103e5573d6000f35b3d6000fd5b60006104187fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b610521565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000341461044e57600080fd5b565b6104598361052b565b6000825111806104665750805b1561047757610475838361057a565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104a56103ea565b826040516104b4929190610afb565b60405180910390a16104c5816105a7565b50565b565b60006104f87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610521565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000819050919050565b61053481610687565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606061059f8383604051806060016040528060278152602001610db460279139610740565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610b96565b60405180910390fd5b806106437fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b610521565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610690816107c6565b6106cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c690610c28565b60405180910390fd5b806106fc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610521565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405161076a9190610cb9565b600060405180830381855af49150503d80600081146107a5576040519150601f19603f3d011682016040523d82523d6000602084013e6107aa565b606091505b50915091506107bb868383876107e9565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561084b57600083510361084357610803856107c6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990610d1c565b60405180910390fd5b5b829050610856565b610855838361085e565b5b949350505050565b6000825111156108715781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a59190610d91565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e3826108b8565b9050919050565b6108f3816108d8565b81146108fe57600080fd5b50565b600081359050610910816108ea565b92915050565b60006020828403121561092c5761092b6108ae565b5b600061093a84828501610901565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261096857610967610943565b5b8235905067ffffffffffffffff81111561098557610984610948565b5b6020830191508360018202830111156109a1576109a061094d565b5b9250929050565b6000806000604084860312156109c1576109c06108ae565b5b60006109cf86828701610901565b935050602084013567ffffffffffffffff8111156109f0576109ef6108b3565b5b6109fc86828701610952565b92509250509250925092565b610a11816108d8565b82525050565b6000602082019050610a2c6000830184610a08565b92915050565b600082825260208201905092915050565b7f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60008201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760208201527f6574000000000000000000000000000000000000000000000000000000000000604082015250565b6000610ac5604283610a32565b9150610ad082610a43565b606082019050919050565b60006020820190508181036000830152610af481610ab8565b9050919050565b6000604082019050610b106000830185610a08565b610b1d6020830184610a08565b9392505050565b7f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610b80602683610a32565b9150610b8b82610b24565b604082019050919050565b60006020820190508181036000830152610baf81610b73565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000610c12602d83610a32565b9150610c1d82610bb6565b604082019050919050565b60006020820190508181036000830152610c4181610c05565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610c7c578082015181840152602081019050610c61565b60008484015250505050565b6000610c9382610c48565b610c9d8185610c53565b9350610cad818560208601610c5e565b80840191505092915050565b6000610cc58284610c88565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610d06601d83610a32565b9150610d1182610cd0565b602082019050919050565b60006020820190508181036000830152610d3581610cf9565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610d6382610d3c565b610d6d8185610a32565b9350610d7d818560208601610c5e565b610d8681610d47565b840191505092915050565b60006020820190508181036000830152610dab8184610d58565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220de36ed83186615bfef857ed86841f1bd6ac94129d7d93e9ea3ea4678c8129dba64736f6c63430008130033",
    "storage": [
      {
        "key": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
        "value": "0x0000000000000000000000003333333333333333333333333333333333333333"
      },
      {
        "key": "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
        "value": "0x0000000000000000000000001111111111111111111111111111111111111111"
      }
    ]
  },
  {
    "address": "0x3333333333333333333333333333333333333333",
    "code": "608060405234801561001057600080fd5b50600436106100885760003560e01c8063829797c51161005b578063829797c51461012657806394ed7fd814610142578063b7dfcbee14610160578063dd517fae1461017c57610088565b80630577a5951461008d57806308789521146100bd5780633e4708a7146100d9578063488c65cd146100f5575b600080fd5b6100a760048036038101906100a291906115f0565b610198565b6040516100b4919061176f565b60405180910390f35b6100d760048036038101906100d291906118c6565b6103d4565b005b6100f360048036038101906100ee9190611922565b6104d9565b005b61010f600480360381019061010a919061199a565b6105c9565b60405161011d929190611a48565b60405180910390f35b610140600480360381019061013b919061199a565b610761565b005b61014a61084d565b604051610157919061176f565b60405180910390f35b61017a600480360381019061017591906118c6565b610add565b005b61019660048036038101906101919190611922565b610be2565b005b60606000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060606000600260008463ffffffff1663ffffffff168152602001908152602001600020805461021c90611aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461024890611aa7565b80156102955780601f1061026a57610100808354040283529160200191610295565b820191906000526020600020905b81548152906001019060200180831161027857829003601f168201915b5050505050905060008151036102b0578193505050506103cf565b600167ffffffffffffffff8111156102cb576102ca61179b565b5b6040519080825280602002602001820160405280156102fe57816020015b60608152602001906001900390816102e95790505b509150600260008463ffffffff1663ffffffff168152602001908152602001600020805461032b90611aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461035790611aa7565b80156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b5050505050826000815181106103bd576103bc611ad8565b5b60200260200101819052508193505050505b919050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561049a576104308282610cd2565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffd2e6b61f7943ece2a8a180f5a6de12498a4fbf1eb8126b933162a6ecc05b6568360405161048d9190611b07565b60405180910390a36104d5565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cc90611b75565b60405180910390fd5b5050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561058a576105358282610f0e565b3373ffffffffffffffffffffffffffffffffffffffff167f0952c34775723f7aeedb0cd12af4acaacb243edd14d7fe655a975a02c8ade9cb838360405161057d929190611b95565b60405180910390a26105c5565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bc90611b75565b60405180910390fd5b5050565b60606000806001846040516105de9190611c08565b90815260200160405180910390206040518060600160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160018201805461062d90611aa7565b80601f016020809104026020016040519081016040528092919081815260200182805461065990611aa7565b80156106a65780601f1061067b576101008083540402835291602001916106a6565b820191906000526020600020905b81548152906001019060200180831161068957829003601f168201915b505050505081526020016002820180546106bf90611aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546106eb90611aa7565b80156107385780601f1061070d57610100808354040283529160200191610738565b820191906000526020600020905b81548152906001019060200180831161071b57829003601f168201915b505050505081525050905080604001516000826000015163ffffffff1614159250925050915091565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561080f576107bc81610fbb565b3373ffffffffffffffffffffffffffffffffffffffff167f30954af82dcb8608d8cb8254608a6ff5df999cb3f00c18bb0c607dd49ff2628b826040516108029190611b07565b60405180910390a261084a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190611b75565b60405180910390fd5b50565b606060006001905060005b60008054906101000a900463ffffffff1663ffffffff168263ffffffff1611610953576000600260008463ffffffff1663ffffffff16815260200190815260200160002080546108a790611aa7565b80601f01602080910402602001604051908101604052809291908181526020018280546108d390611aa7565b80156109205780601f106108f557610100808354040283529160200191610920565b820191906000526020600020905b81548152906001019060200180831161090357829003601f168201915b50505050509050600081511461093f57818061093b90611c5e565b9250505b50818061094b90611c5e565b925050610858565b60008163ffffffff1667ffffffffffffffff8111156109755761097461179b565b5b6040519080825280602002602001820160405280156109a857816020015b60608152602001906001900390816109935790505b50905060019250600091505b60008054906101000a900463ffffffff1663ffffffff168363ffffffff1611610ad4576000600260008563ffffffff1663ffffffff1681526020019081526020016000208054610a0390611aa7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2f90611aa7565b8015610a7c5780601f10610a5157610100808354040283529160200191610a7c565b820191906000526020600020905b815481529060010190602001808311610a5f57829003601f168201915b505050505090506000815114610ac05780828463ffffffff1681518110610aa657610aa5611ad8565b5b60200260200101819052508280610abc90611c5e565b9350505b508280610acc90611c5e565b9350506109b4565b80935050505090565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610ba357610b3982826110c1565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f298bbe286d75ec1b93574dcec29da279c7bb11f31934b017c8a50d306415f42083604051610b969190611b07565b60405180910390a3610bde565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd590611b75565b60405180910390fd5b5050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c9357610c3e8282611338565b3373ffffffffffffffffffffffffffffffffffffffff167fa3470611b34baa8675fc20a2fcc09c2a7e6ad3f6a8febc0d19897725b1bf7c6d8383604051610c86929190611b95565b60405180910390a2610cce565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611b75565b60405180910390fd5b5050565b6000600182604051610ce49190611c08565b908152602001604051809103902060000160009054906101000a900463ffffffff16905060008163ffffffff1603610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4890611cd6565b60405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff168163ffffffff1614610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de590611d42565b60405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549063ffffffff021916905560016040518060400160405280600381526020017f514f450000000000000000000000000000000000000000000000000000000000815250604051610e859190611c08565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff168163ffffffff1603610f0957600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690555b505050565b6000600183604051610f209190611c08565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1603610f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7f90611cd6565b60405180910390fd5b80600183604051610f999190611c08565b90815260200160405180910390206002019081610fb69190611f18565b505050565b6000600182604051610fcd9190611c08565b908152602001604051809103902060000160009054906101000a900463ffffffff16905060008163ffffffff160361103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103190611cd6565b60405180910390fd5b60018260405161104a9190611c08565b9081526020016040518091039020600080820160006101000a81549063ffffffff02191690556001820160006110809190611521565b6002820160006110909190611521565b5050600260008263ffffffff1663ffffffff16815260200190815260200160002060006110bd9190611521565b5050565b60006001826040516110d39190611c08565b908152602001604051809103902060000160009054906101000a900463ffffffff16905060008163ffffffff1603611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790611cd6565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000600260008363ffffffff1663ffffffff16815260200190815260200160002080546111c090611aa7565b905014611202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f990612036565b60405180910390fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555060016040518060400160405280600381526020017f514f4500000000000000000000000000000000000000000000000000000000008152506040516112a59190611c08565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff168263ffffffff1603611332576001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505050565b600082510361137c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611373906120a2565b60405180910390fd5b600060018360405161138e9190611c08565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff16146113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed9061210e565b60405180910390fd5b60006114006114c9565b905082600260008363ffffffff1663ffffffff168152602001908152602001600020908161142e9190611f18565b5060405180606001604052808263ffffffff168152602001848152602001838152506001846040516114609190611c08565b908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160010190816114aa9190611f18565b5060408201518160020190816114c09190611f18565b50905050505050565b600080600081819054906101000a900463ffffffff16809291906114ec90611c5e565b91906101000a81548163ffffffff021916908363ffffffff1602179055505060008054906101000a900463ffffffff16905090565b50805461152d90611aa7565b6000825580601f1061153f575061155e565b601f01602090049060005260206000209081019061155d9190611561565b5b50565b5b8082111561157a576000816000905550600101611562565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115bd82611592565b9050919050565b6115cd816115b2565b81146115d857600080fd5b50565b6000813590506115ea816115c4565b92915050565b60006020828403121561160657611605611588565b5b6000611614848285016115db565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611683578082015181840152602081019050611668565b60008484015250505050565b6000601f19601f8301169050919050565b60006116ab82611649565b6116b58185611654565b93506116c5818560208601611665565b6116ce8161168f565b840191505092915050565b60006116e583836116a0565b905092915050565b6000602082019050919050565b60006117058261161d565b61170f8185611628565b93508360208202850161172185611639565b8060005b8581101561175d578484038952815161173e85826116d9565b9450611749836116ed565b925060208a01995050600181019050611725565b50829750879550505050505092915050565b6000602082019050818103600083015261178981846116fa565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117d38261168f565b810181811067ffffffffffffffff821117156117f2576117f161179b565b5b80604052505050565b600061180561157e565b905061181182826117ca565b919050565b600067ffffffffffffffff8211156118315761183061179b565b5b61183a8261168f565b9050602081019050919050565b82818337600083830152505050565b600061186961186484611816565b6117fb565b90508281526020810184848401111561188557611884611796565b5b611890848285611847565b509392505050565b600082601f8301126118ad576118ac611791565b5b81356118bd848260208601611856565b91505092915050565b600080604083850312156118dd576118dc611588565b5b60006118eb858286016115db565b925050602083013567ffffffffffffffff81111561190c5761190b61158d565b5b61191885828601611898565b9150509250929050565b6000806040838503121561193957611938611588565b5b600083013567ffffffffffffffff8111156119575761195661158d565b5b61196385828601611898565b925050602083013567ffffffffffffffff8111156119845761198361158d565b5b61199085828601611898565b9150509250929050565b6000602082840312156119b0576119af611588565b5b600082013567ffffffffffffffff8111156119ce576119cd61158d565b5b6119da84828501611898565b91505092915050565b600082825260208201905092915050565b60006119ff82611649565b611a0981856119e3565b9350611a19818560208601611665565b611a228161168f565b840191505092915050565b60008115159050919050565b611a4281611a2d565b82525050565b60006040820190508181036000830152611a6281856119f4565b9050611a716020830184611a39565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611abf57607f821691505b602082108103611ad257611ad1611a78565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020820190508181036000830152611b2181846119f4565b905092915050565b7f73656e646572206973206e6f7420716f65000000000000000000000000000000600082015250565b6000611b5f6011836119e3565b9150611b6a82611b29565b602082019050919050565b60006020820190508181036000830152611b8e81611b52565b9050919050565b60006040820190508181036000830152611baf81856119f4565b90508181036020830152611bc381846119f4565b90509392505050565b600081905092915050565b6000611be282611649565b611bec8185611bcc565b9350611bfc818560208601611665565b80840191505092915050565b6000611c148284611bd7565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff82169050919050565b6000611c6982611c4e565b915063ffffffff8203611c7f57611c7e611c1f565b5b600182019050919050565b7f726f6c65206e6f74206578697374730000000000000000000000000000000000600082015250565b6000611cc0600f836119e3565b9150611ccb82611c8a565b602082019050919050565b60006020820190508181036000830152611cef81611cb3565b9050919050565b7f61646472657373206973206e6f7420726f6c6500000000000000000000000000600082015250565b6000611d2c6013836119e3565b9150611d3782611cf6565b602082019050919050565b60006020820190508181036000830152611d5b81611d1f565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611dc47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d87565b611dce8683611d87565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000611e15611e10611e0b84611de6565b611df0565b611de6565b9050919050565b6000819050919050565b611e2f83611dfa565b611e43611e3b82611e1c565b848454611d94565b825550505050565b600090565b611e58611e4b565b611e63818484611e26565b505050565b5b81811015611e8757611e7c600082611e50565b600181019050611e69565b5050565b601f821115611ecc57611e9d81611d62565b611ea684611d77565b81016020851015611eb5578190505b611ec9611ec185611d77565b830182611e68565b50505b505050565b600082821c905092915050565b6000611eef60001984600802611ed1565b1980831691505092915050565b6000611f088383611ede565b9150826002028217905092915050565b611f2182611649565b67ffffffffffffffff811115611f3a57611f3961179b565b5b611f448254611aa7565b611f4f828285611e8b565b600060209050601f831160018114611f825760008415611f70578287015190505b611f7a8582611efc565b865550611fe2565b601f198416611f9086611d62565b60005b82811015611fb857848901518255600182019150602085019450602081019050611f93565b86831015611fd55784890151611fd1601f891682611ede565b8355505b6001600288020188555050505b505050505050565b7f616c726561647920686173206120726f6c650000000000000000000000000000600082015250565b60006120206012836119e3565b915061202b82611fea565b602082019050919050565b6000602082019050818103600083015261204f81612013565b9050919050565b7f726f6c65206e616d652063616e277420626520656d7074790000000000000000600082015250565b600061208c6018836119e3565b915061209782612056565b602082019050919050565b600060208201905081810360008301526120bb8161207f565b9050919050565b7f726f6c6520616c72656164792065786973747300000000000000000000000000600082015250565b60006120f86013836119e3565b9150612103826120c2565b602082019050919050565b60006020820190508181036000830152612127816120eb565b905091905056fea2646970667358221220a73d83d4f97c5b8b69f470090d389f74df06183e365972bbf790f9631bd628fd64736f6c63430008130033",
    "storage": [
      {
        "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000005"
      },
      {
        "key": "0x108062220f03ee31deb077d1c076899378a71cf7656c388a8b520fd16cfd7b19",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000003"
      },
      {
        "key": "0x108062220f03ee31deb077d1c076899378a71cf7656c388a8b520fd16cfd7b1a",
        "value": "0x496e766573746f72000000000000000000000000000000000000000000000010"
      },
      {
        "key": "0x108062220f03ee31deb077d1c076899378a71cf7656c388a8b520fd16cfd7b1b",
        "value": "0x496e766573746f72000000000000000000000000000000000000000000000010"
      },
      {
        "key": "0x3078e8d63bb192b25607ec4f51de61b7a6792bdcac129829bdce34cc50524f41",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000001"
      },
      {
        "key": "0x3078e8d63bb192b25607ec4f51de61b7a6792bdcac129829bdce34cc50524f42",
        "value": "0x514f450000000000000000000000000000000000000000000000000000000006"
      },
      {
        "key": "0x3078e8d63bb192b25607ec4f51de61b7a6792bdcac129829bdce34cc50524f43",
        "value": "0x514f450000000000000000000000000000000000000000000000000000000006"
      },
      {
        "key": "0x36c870b65ce78e9dd3fbcb80fd9f4f676058fbe3b48d813d064c39f16a5e7bf1",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000004"
      },
      {
        "key": "0x36c870b65ce78e9dd3fbcb80fd9f4f676058fbe3b48d813d064c39f16a5e7bf2",
        "value": "0x446576656c6f7065720000000000000000000000000000000000000000000012"
      },
      {
        "key": "0x36c870b65ce78e9dd3fbcb80fd9f4f676058fbe3b48d813d064c39f16a5e7bf3",
        "value": "0x446576656c6f7065720000000000000000000000000000000000000000000012"
      },
      {
        "key": "0x57c6e1a4952ad2a5ce142fb25dd4a9ccbdac6324c0dedb95abdfbf64558d7ca8",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000002"
      },
      {
        "key": "0x57c6e1a4952ad2a5ce142fb25dd4a9ccbdac6324c0dedb95abdfbf64558d7ca9",
        "value": "0x56616c696461746f720000000000000000000000000000000000000000000012"
      },
      {
        "key": "0x57c6e1a4952ad2a5ce142fb25dd4a9ccbdac6324c0dedb95abdfbf64558d7caa",
        "value": "0x56616c696461746f720000000000000000000000000000000000000000000012"
      },
      {
        "key": "0x620997c9339bf120927d075c65a3f10bc9a7af9e80d663f20cb4cdb154757cba",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000002"
      },
      {
        "key": "0x679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c",
        "value": "0x56616c696461746f720000000000000000000000000000000000000000000012"
      },
      {
        "key": "0x88601476d11616a71c5be67555bd1dff4b1cbf21533d2669b768b61518cfe1c3",
        "value": "0x496e766573746f72000000000000000000000000000000000000000000000010"
      },
      {
        "key": "0x9e4a2a450eb77cad66556c81d3860df5236081d2a48578e4e98ba8b02a6cb76b",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000001"
      },
      {
        "key": "0xa5ab3137dbc1c5fa030cbc3d01a8a1cd6bb37c99be407dfac095b17911bbda30",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "key": "0xb90d7362b09b9acbd0be3edeaaf56fb0abec166909de1706a53e9a168686ec05",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000005"
      },
      {
        "key": "0xb90d7362b09b9acbd0be3edeaaf56fb0abec166909de1706a53e9a168686ec06",
        "value": "0x5573657200000000000000000000000000000000000000000000000000000008"
      },
      {
        "key": "0xb90d7362b09b9acbd0be3edeaaf56fb0abec166909de1706a53e9a168686ec07",
        "value": "0x5573657200000000000000000000000000000000000000000000000000000008"
      },
      {
        "key": "0xb98b78633099fa36ed8b8680c4f8092689e1e04080eb9cbb077ca38a14d7e384",
        "value": "0x5573657200000000000000000000000000000000000000000000000000000008"
      },
      {
        "key": "0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0",
        "value": "0x514f450000000000000000000000000000000000000000000000000000000006"
      },
      {
        "key": "0xea91e3756147a4a87153e71cf94931b55657417fac73883443caa67b34fdf990",
        "value": "0x0000000000000000000000000000000000000000000000000000000000000001"
      },
      {
        "key": "0xee60d0579bcffd98e668647d59fec1ff86a7fb340ce572e844f234ae73a6918f",
        "value": "0x446576656c6f7065720000000000000000000000000000000000000000000012"
      }
    ]
  },
  {
    "address": "0xbf657D0ef7b48167657A703Ed8Fd063F075246D7",
    "code": "",
    "storage": []
  },
  {
    "address": "0xdeaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD",
    "code": "608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631a6952301461007d5780633b33e187146100c05780634313b531146101035780636057361d1461015a5780638a59c5a614610187578063f5b326c1146101ca575b600080fd5b34801561008957600080fd5b506100be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061020d565b005b3480156100cc57600080fd5b50610101600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061025f565b005b34801561010f57600080fd5b506101186103eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016657600080fd5b5061018560048036038101908080359060200190929190505050610431565b005b34801561019357600080fd5b506101c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061044c565b005b3480156101d657600080fd5b5061020b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105d6565b005b8073ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f1935050505015801561025b573d6000803e3d6000fd5b5050565b606060006040516024016040516020818303038152906040527f4313b531000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505091508273ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b8381101561032d578082015181840152602081019050610312565b50505050905090810190601f16801561035a5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af291505090508015156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7465737443616c6c636f6465206661696c65640000000000000000000000000081525060200191505060405180910390fd5b505050565b60008069152d02c7e14af68000006104016105ef565b80828152602001915050604051809103906000f080158015610427573d6000803e3d6000fd5b5090508091505090565b80600080600181526020019081526020016000208190555050565b606060006040516024016040516020818303038152906040527f4313b531000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505091508273ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b8381101561051a5780820151818401526020810190506104ff565b50505050905090810190601f1680156105475780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af491505090508015156105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7465737444656c656761746543616c6c206661696c656400000000000000000081525060200191505060405180910390fd5b505050565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b6040516106ed8061060083390190560060806040526040516020806106ed833981018060405261002291908101906100c8565b8042101515610066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161005d9061014e565b60405180910390fd5b8060008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610178565b60006100c0825161016e565b905092915050565b6000602082840312156100da57600080fd5b60006100e8848285016100b4565b91505092915050565b6000602382527f556e6c6f636b2074696d652073686f756c6420626520696e207468652066757460208301527f75726500000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006020820190508181036000830152610167816100f1565b9050919050565b6000819050919050565b610566806101876000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063251c1aa3146100675780633ccfd60b146100925780638da5cb5b146100a9578063a8cd0a80146100d4575b600080fd5b34801561007357600080fd5b5061007c6100ff565b604051610089919061044a565b60405180910390f35b34801561009e57600080fd5b506100a7610105565b005b3480156100b557600080fd5b506100be610230565b6040516100cb91906103cd565b60405180910390f35b3480156100e057600080fd5b506100e9610256565b6040516100f691906103e8565b60405180910390f35b60005481565b600054421015151561014c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101439061040a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d59061042a565b60405180910390fd5b7fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b933073ffffffffffffffffffffffffffffffffffffffff163142604051610226929190610465565b60405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060808091505090565b610269816104be565b82525050565b600061027a8261049b565b808452602084019350836020820285016102938561048e565b60005b848110156102cc5783830388526102ae838351610381565b92506102b9826104b1565b9150602088019750600181019050610296565b508196508694505050505092915050565b60006102e8826104a6565b8084526102fc8160208601602086016104e8565b6103058161051b565b602085010191505092915050565b6000601682527f596f752063616e277420776974686472617720796574000000000000000000006020830152604082019050919050565b6000601482527f596f75206172656e277420746865206f776e65720000000000000000000000006020830152604082019050919050565b6000604083016000830151848203600086015261039e82826102dd565b91505060208301516103b360208601826103be565b508091505092915050565b6103c7816104de565b82525050565b60006020820190506103e26000830184610260565b92915050565b60006020820190508181036000830152610402818461026f565b905092915050565b6000602082019050818103600083015261042381610313565b9050919050565b600060208201905081810360008301526104438161034a565b9050919050565b600060208201905061045f60008301846103be565b92915050565b600060408201905061047a60008301856103be565b61048760208301846103be565b9392505050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156105065780820151818401526020810190506104eb565b83811115610515576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820699cd2bd554ee7ce8dc5466b49ed418a7ee345aacad25f7c53aaf9a8dc5243a26c6578706572696d656e74616cf50037a165627a7a72305820c6153ce3ad239d26764646673b70dfad043d1b8e1fd056c978e5f8860c0b2b430029",
    "storage": []
  },
  {
    "address": "0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF",
    "code": "608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631a6952301461007d5780633b33e187146100c05780634313b531146101035780636057361d1461015a5780638a59c5a614610187578063f5b326c1146101ca575b600080fd5b34801561008957600080fd5b506100be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061020d565b005b3480156100cc57600080fd5b50610101600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061025f565b005b34801561010f57600080fd5b506101186103eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016657600080fd5b5061018560048036038101908080359060200190929190505050610431565b005b34801561019357600080fd5b506101c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061044c565b005b3480156101d657600080fd5b5061020b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105d6565b005b8073ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f1935050505015801561025b573d6000803e3d6000fd5b5050565b606060006040516024016040516020818303038152906040527f4313b531000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505091508273ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b8381101561032d578082015181840152602081019050610312565b50505050905090810190601f16801561035a5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af291505090508015156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7465737443616c6c636f6465206661696c65640000000000000000000000000081525060200191505060405180910390fd5b505050565b60008069152d02c7e14af68000006104016105ef565b80828152602001915050604051809103906000f080158015610427573d6000803e3d6000fd5b5090508091505090565b80600080600181526020019081526020016000208190555050565b606060006040516024016040516020818303038152906040527f4313b531000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505091508273ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b8381101561051a5780820151818401526020810190506104ff565b50505050905090810190601f1680156105475780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af491505090508015156105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7465737444656c656761746543616c6c206661696c656400000000000000000081525060200191505060405180910390fd5b505050565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b6040516106ed8061060083390190560060806040526040516020806106ed833981018060405261002291908101906100c8565b8042101515610066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161005d9061014e565b60405180910390fd5b8060008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610178565b60006100c0825161016e565b905092915050565b6000602082840312156100da57600080fd5b60006100e8848285016100b4565b91505092915050565b6000602382527f556e6c6f636b2074696d652073686f756c6420626520696e207468652066757460208301527f75726500000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006020820190508181036000830152610167816100f1565b9050919050565b6000819050919050565b610566806101876000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063251c1aa3146100675780633ccfd60b146100925780638da5cb5b146100a9578063a8cd0a80146100d4575b600080fd5b34801561007357600080fd5b5061007c6100ff565b604051610089919061044a565b60405180910390f35b34801561009e57600080fd5b506100a7610105565b005b3480156100b557600080fd5b506100be610230565b6040516100cb91906103cd565b60405180910390f35b3480156100e057600080fd5b506100e9610256565b6040516100f691906103e8565b60405180910390f35b60005481565b600054421015151561014c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101439061040a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d59061042a565b60405180910390fd5b7fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b933073ffffffffffffffffffffffffffffffffffffffff163142604051610226929190610465565b60405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060808091505090565b610269816104be565b82525050565b600061027a8261049b565b808452602084019350836020820285016102938561048e565b60005b848110156102cc5783830388526102ae838351610381565b92506102b9826104b1565b9150602088019750600181019050610296565b508196508694505050505092915050565b60006102e8826104a6565b8084526102fc8160208601602086016104e8565b6103058161051b565b602085010191505092915050565b6000601682527f596f752063616e277420776974686472617720796574000000000000000000006020830152604082019050919050565b6000601482527f596f75206172656e277420746865206f776e65720000000000000000000000006020830152604082019050919050565b6000604083016000830151848203600086015261039e82826102dd565b91505060208301516103b360208601826103be565b508091505092915050565b6103c7816104de565b82525050565b60006020820190506103e26000830184610260565b92915050565b60006020820190508181036000830152610402818461026f565b905092915050565b6000602082019050818103600083015261042381610313565b9050919050565b600060208201905081810360008301526104438161034a565b9050919050565b600060208201905061045f60008301846103be565b92915050565b600060408201905061047a60008301856103be565b61048760208301846103be565b9392505050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156105065780820151818401526020810190506104eb565b83811115610515576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820699cd2bd554ee7ce8dc5466b49ed418a7ee345aacad25f7c53aaf9a8dc5243a26c6578706572696d656e74616cf50037a165627a7a72305820c6153ce3ad239d26764646673b70dfad043d1b8e1fd056c978e5f8860c0b2b430029",
    "storage": []
  }
]

const authAccounts = [
  {
    "@type": "/ethermint.types.v1.EthAccount",
    "base_account": {
      "address": "quarix1xvenxvenxvenxvenxvenxvenxvenxvenhzmkvf",
      "pub_key": null,
      "sequence": "0"
    },
    "code_hash": "0x476e61662dccebc6ac6169df17f703e2379f6811e9d07a5ce4656f58e670e0d4"
  },
  {
    "@type": "/ethermint.types.v1.EthAccount",
    "base_account": {
      "address": "quarix1zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg32pfd3v",
      "pub_key": null,
      "sequence": "0"
    },
    "code_hash": "0x014f74e1f4c545008892c68dcc03f1fcf3f4dd5fe94c4eb6f15d4a22a9e9227f"
  },
  {
    "@type": "/ethermint.types.v1.EthAccount",
    "base_account": {
      "address": "quarix1yg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3z9uvtem",
      "pub_key": null,
      "sequence": "0"
    },
    "code_hash": "0xbddf59d6063d5ffb2d6a42c56508be6228c23da0c637e91b2c4cf0bf6022c089"
  },
  {
    "@type": "/ethermint.types.v1.EthAccount",
    "base_account": {
      "address": "quarix1m6kaatw74h02mh4dm6kaatw74h02mh4dtsnhxa",
      "pub_key": null,
      "sequence": "0"
    },
    "code_hash": "0xe93072b98da77cab996a7173d886434826776015368f14863e1434e858a61ee9"
  },
  {
    "@type": "/ethermint.types.v1.EthAccount",
    "base_account": {
      "address": "quarix1llllllllllllllllllllllllllllllll5wllr5",
      "pub_key": null,
      "sequence": "0"
    },
    "code_hash": "0xe93072b98da77cab996a7173d886434826776015368f14863e1434e858a61ee9"
  }
]

const updatePorts = (data, ports, index) => {
  let lines = data.split(/\r?\n/);
  for (const key in ports) {
    let [k1, k2] = key.split("."); // key for example "api.address"
    let port = ports[key];
    let find = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      //  for example: [json-rpc]
      if (line.startsWith(`[${k1}]`)) {
        find = true;
      }
      //for example: "tcp://0.0.0.0:1317"
      if (find && line.startsWith(`${k2} = `)) {
        const oldPort = line.split(":").pop().split(`"`)[0];
        const newPort = String(port + index);
        // console.log(line, oldPort, newPort);
        lines[i] = line.replace(oldPort, newPort).replace("localhost", "0.0.0.0").replace("127.0.0.1", "0.0.0.0");
        break;
      }
    }
  }
  return lines.join("\n");
};

const updateCfg = (data, cfg) => {
  let lines = data.split(/\r?\n/);
  for (const key in cfg) {
    let find = true;
    let k1;
    let k2 = key;
    if (key.indexOf(".") > 0) {
      [k1, k2] = key.split(".");
      find = false;
    }
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (!find && line.startsWith(`[${k1}]`)) {
        find = true;
      }
      if (find && line.startsWith(`${k2} = `)) {
        lines[i] = `${k2} = ${cfg[key]}`;
        break;
      }
    }
  }
  return lines.join("\n");
};

let init = async function () {
  console.log("argv:", JSON.stringify(argv), "platform:", platform, "arch:", arch);
  try {
    // 读取配置文件
    let config;
    try {
      config = await fs.readJson("./config.json");
    } catch (error) {
      config = await fs.readJson("./config.default.json");
    }
    const { app, tendermint, preMinePerAccount, fixedFirstValidator, preMineAccounts, ibc } = config;
    gaiaP2pPort = ibc.tendermint["p2p.laddr"].split(":").pop().split(`"`)[0];
    if (app.chain_id) {
      rlyCfg = rlyCfg.replaceAll(quarixChainId, app.chain_id);
      clientCfg = clientCfg.replaceAll(quarixChainId, app.chain_id);
      quarixChainId = app.chain_id;
    }

    if (ibc.enable && !fs.existsSync(rly)) {
      try {
        console.log("begin download relayer.....");
        const rlyUrl = `https://github.com/cosmos/relayer/releases/download/v2.1.2/Cosmos.Relayer_2.1.2_${platform}_${arch}.tar.gz`;
        await download(rlyUrl, "./relayer", { extract: true });
        await fs.copyFile("./relayer/Cosmos Relayer", `./${rly}`);
      } catch (error) {}
    }

    if (ibc.enable && !fs.existsSync(rly)) {
      console.warn("relayer is not exist, please go to https://github.com/cosmos/relayer/releases download and extract rename executable program to rly");
      return;
    } else if (fs.existsSync(rly)) {
      await fs.chmod(rly, 0o777);
    }

    if (ibc.enable && !fs.existsSync(gaiad)) {
      try {
        console.log("begin download gaiad.....");
        const gaiadUrl = `https://github.com/cosmos/gaia/releases/download/v7.1.0/gaiad-v7.1.0-${platform}-${arch}`;
        await download(gaiadUrl, ".", { filename: gaiad });
      } catch (error) {}
    }

    if (ibc.enable && !fs.existsSync(gaiad)) {
      console.warn("gaiad is not exist, please go to https://github.com/cosmos/gaia/releases download and extract rename executable program to gaiad");
      return;
    } else if (fs.existsSync(gaiad)) {
      await fs.chmod(gaiad, 0o777);
    }

    const nodeKey = {"priv_key":{"type":"tendermint/PrivKeyEd25519","value":"jawXThUVHDQQflxSXHYMDDtSx5vc9XsD0Eb4zoygQvjCk1UX3ePJ3xPuTUlsJBUjEJV8hB4wfflrZ8sl+kZasQ=="}};
    const privValidatorKey = {"address":"62382679430420F0987AD892B1D52B80F6E306DB","pub_key":{"type":"tendermint/PubKeyEd25519","value":"/PnMg/MEeXAUsmAsV2QpV2PDH/PAn3fSskPza5mXR/4="},"priv_key":{"type":"tendermint/PrivKeyEd25519","value":"MRm4JzYL7BGrsRzD7deY3wT09Hjs0m2VJKSUG0i3Vrz8+cyD8wR5cBSyYCxXZClXY8Mf88Cfd9KyQ/NrmZdH/g=="}}
    const createValidator = {"body":{"messages":[{"@type":"/cosmos.staking.v1beta1.MsgCreateValidator","description":{"moniker":"node0","identity":"","website":"","security_contact":"","details":""},"commission":{"rate":"0.100000000000000000","max_rate":"1.000000000000000000","max_change_rate":"1.000000000000000000"},"min_self_delegation":"1","delegator_address":"quarix1hajh6rhhkjqkwet6wqld3lgx8ur4y3khmpfhlu","validator_address":"quarixvaloper1hajh6rhhkjqkwet6wqld3lgx8ur4y3khajuzj7","pubkey":{"@type":"/cosmos.crypto.ed25519.PubKey","key":"/PnMg/MEeXAUsmAsV2QpV2PDH/PAn3fSskPza5mXR/4="},"value":{"denom":"aqrx","amount":"100000000000000000000"}}],"memo":"d53fe9351b94fd03be1fa219f39e3b77e4b23e2b@192.168.0.1:26656","timeout_height":"0","extension_options":[],"non_critical_extension_options":[]},"auth_info":{"signer_infos":[{"public_key":{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"A50rbJg3TMPACbzE5Ujg0clx+d4udBAtggqEQiB7v9Sc"},"mode_info":{"single":{"mode":"SIGN_MODE_DIRECT"}},"sequence":"0"}],"fee":{"amount":[],"gas_limit":"0","payer":"","granter":""},"tip":null},"signatures":["RjghsgehZak8VRmereMlEtymEc1usLsBH9hlxhqYjxsu/AKy+v520TSOuq/sXizSPYJqW/GDFaeYl3dtXGcE+wE="]}
    const keySeed = { secret: "october pride genuine harvest reunion sight become tuna kingdom punch girl lizard cat crater fee emotion seat test output safe volume caught design soft", privateKey: "e54bff83fc945cba77ca3e45d69adc5b57ad8db6073736c8422692abecfb5fe2", publicKey: "049d2b6c98374cc3c009bcc4e548e0d1c971f9de2e74102d820a8442207bbfd49c1adb92ef31b067e67e77dc77061f76bb52fe4dfa85667f27657610a77429a09b", compressedPublicKey: "039d2b6c98374cc3c009bcc4e548e0d1c971f9de2e74102d820a8442207bbfd49c", address: "0xbf657D0ef7b48167657A703Ed8Fd063F075246D7", bip39Address: "quarix1hajh6rhhkjqkwet6wqld3lgx8ur4y3khmpfhlu" };
    if (await fs.pathExists(scriptStop)) {
      console.log("Try to stop the evmosd under the nodes directory");
      await execPromis(scriptStop, { cwd: nodesDir }); // Anyway, stop it first
      await sleep(platform == "win32" ? 600 : 300);
    }
    if (!fs.existsSync(evmosd) || isCompile) {
      console.log("Start recompiling evmosd...");
      let make = await execPromis("go build ../cmd/evmosd", { cwd: curDir });
      console.log("evmosd compile finished", make);
    }

    if (!fs.existsSync(evmosd)) {
      console.log("evmosd Executable file does not exist");
      return;
    }

    if (validators < 1) {
      console.log("validators >= 1");
      return;
    }

    console.log("Start cleaning up folder nodes");
    await fs.emptyDir(nodesDir);
    await fs.ensureDir(nodesDir);
    console.log("Folder nodes has been cleaned up");

    // begin init gaia
    if (ibc.enable) {
      await execPromis(`${gaiadCmd} init gaia --chain-id ${gaiaChainId} --home ${gaiaHome}`, { cwd: curDir });
      await execPromis(`${gaiadCmd} keys add validator --keyring-backend=test --output json --home ${gaiaHome} > ${gaiaHome}/validator_seed.json 2>&1`, { cwd: curDir });
      await execPromis(`${gaiadCmd} keys add user --keyring-backend=test --output json --home ${gaiaHome} > ${gaiaHome}/key_seed.json 2>&1`, { cwd: curDir });
      const validatorAddress = (await fs.readJSON(`${gaiaHome}/validator_seed.json`)).address;
      const userAddress = (await fs.readJSON(`${gaiaHome}/key_seed.json`)).address;
      await execPromis(`${gaiadCmd} add-genesis-account ${validatorAddress} 100000000000000000000000000uatom --home ${gaiaHome}`, { cwd: curDir });
      await execPromis(`${gaiadCmd} add-genesis-account ${userAddress} 100000000000000000000000000uatom --home ${gaiaHome}`, { cwd: curDir });
      await execPromis(`${gaiadCmd} gentx validator 1000000000000000000uatom --keyring-backend=test --chain-id ${gaiaChainId} --home ${gaiaHome}`, { cwd: curDir });
      await execPromis(`${gaiadCmd} collect-gentxs --home ${gaiaHome}`, { cwd: curDir });

      let data;
      const appConfigPath = `${gaiaHome}/config/app.toml`;
      data = await fs.readFile(appConfigPath, "utf8");
      data = updateCfg(data, ibc.app);
      await fs.writeFile(appConfigPath, data);

      const configPath = `${gaiaHome}/config/config.toml`;
      data = await fs.readFile(configPath, "utf8");
      data = updateCfg(data, ibc.tendermint);
      await fs.writeFile(configPath, data);

      const genesisPath = `${gaiaHome}/config/genesis.json`;
      data = await fs.readFile(genesisPath, "utf8");
      data = data.replaceAll("stake", `uatom`);
      await fs.writeFile(genesisPath, data);
    }

    {
      const initFiles = `${platform !== "win32" ? "./" : ""}${evmosd} testnet init-files --v ${nodesCount} --output-dir ./nodes --chain-id ${quarixChainId} --keyring-backend test`;
      const initFilesValidator = `${platform !== "win32" ? "./" : ""}${evmosd} testnet init-files --v ${validators} --output-dir ./nodes --chain-id ${quarixChainId} --keyring-backend test`;
      console.log(`Exec cmd: ${initFiles}`);
      const { stdout, stderr } = await execPromis(initFiles, { cwd: curDir });
      console.log(`init-files ${stdout}${stderr}\n`);

      if (commonNode > 0) {
        for (let i = 0; i < validators; i++) {
          await fs.remove(path.join(nodesDir, `node${i}`));
        }
        await fs.remove(path.join(nodesDir, `gentxs`));

        // re init validator, and turn a validator node into a common node
        await execPromis(initFilesValidator, { cwd: curDir });
        const genesisPath = path.join(nodesDir, `node0/evmosd/config/genesis.json`);
        for (let i = validators; i < nodesCount; i++) {
          await fs.copy(genesisPath, path.join(nodesDir, `node${i}/evmosd/config/genesis.json`));
        }
      }

      if (fixedFirstValidator) {
        await fs.writeJSON(path.join(nodesDir, `node0/evmosd/config/node_key.json`), nodeKey);
        await fs.writeJSON(path.join(nodesDir, `node0/evmosd/config/priv_validator_key.json`), privValidatorKey);
        await fs.outputJSON(path.join(nodesDir, `node0/evmosd/key_seed.json`), keySeed);
        const keyringPath = path.join(nodesDir, `node0/evmosd/keyring-test`);
        await fs.emptyDir(keyringPath);
        await fs.writeFile(path.join(keyringPath, `bf657d0ef7b48167657a703ed8fd063f075246d7.address`), "eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0wMy0xNyAxNToxNzoyMi4yMTA4NjkgKzA4MDAgQ1NUIG09KzAuMDkwODExMTI2IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiaE1GUk1GS3VmWG1MN3JqTCJ9.7BAWENEQQIuPQgTpU4KndAzJehSmrfpmCB3QjetS-aDxkCQi4eKS9g.0Yqfk_vOloLdfMu4.BLT_MDoICsIXwiFVQkHfSwva025Ys6T1vEIgucHj31E8_2LImXjE9E7SF2MayogN9nTr_TRw_rlPy6AJ79Bi3hscunNZHNA46WxsncNJodp5iBMTRt2KG2JeMiCEHRUIh1OATVqc_nKqnkR0ZgPHFKxCQY5xUoPB_Ix_fqARrFcSQEk_sLceRpRMRVWj3yOpg6YzFi47x7IGoIg1OsvhsKj1sOYqCTgTzcRDSzEG3ROZgzbpBuM.u-hKqVwDVyujqCQCMaQzzw");
        await fs.writeFile(path.join(keyringPath, `node0.info`), "eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjcmVhdGVkIjoiMjAyMy0wMy0xNyAxNToxNzoyMi4yMDkzODEgKzA4MDAgQ1NUIG09KzAuMDg5MzIzNDE4IiwiZW5jIjoiQTI1NkdDTSIsInAyYyI6ODE5MiwicDJzIjoiUDBPUkJVczJ1eWRYR3RUZyJ9.XaNXPomwcd9zfFaazm6QP3XeFQPY4Qm4zFh12YO3GDyOykBdB_RxiA.VR3S0G6Cm081EtOJ.oq8vBlNiOIJRSfkL3FKTHRClIW5IzVh4yQy-Drh2NnyCRbIKu41arpFq9UggKfm3i2kukscRqX2UN4Fi5KHlc3sS4Vq4d2aMlP_2vp7S3xVeLMEaVqZN-WuMG_FHOJiWxAFgzJn5uV5G-6WxOAK3CsxPzbc0k7VlkV705tSsCmPbWf4jNeuRQjdK6fjppx3jcipmX4M6I5xTO1Rv9imRuMP3prCF_XYgEd86OG3l_HrCTjI-TCaCmhtONaCpenmBzbB-4hDokDSslvxyDbYnoTPnWxDmVLRmm5vH1POVSna7kUXX3UB8uQyDQ_BA2oc6X27r7Ov5S1Jw3cRj-rL9MbpUVe7QftG_FV0CiRsAbEjc1z3iVrbP_uWHk2wGJzKF02GNlsFiLvIDjDAGDN6R1Ku2pNdsoyHllkUZ2P_3masJUR4KXNmPW5w7EePkvl-VegMRzBjS65Qtc-veGtp1VmFIi2o.1FZA0sSwiFUphL4cuXJHog");
      }
    }

    await fs.copy(evmosd, `./nodes/${evmosd}`);
    if (ibc.enable) {
      await fs.copy(gaiad, `./nodes/${gaiad}`);
      await fs.copy(rly, `./nodes/${rly}`);
    }

    let nodeIds = [];
    for (let i = 0; i < nodesCount; i++) {
      const nodeKey = await fs.readJSON(path.join(nodesDir, `node${i}/evmosd/config/node_key.json`));
      const nodeId = tenderKeys.getBurrowAddressFromPrivKey(Buffer.from(nodeKey.priv_key.value, "base64").toString("hex"));
      nodeIds.push(nodeId);

      const keySeedPath = path.join(nodesDir, `node${i}/evmosd/key_seed.json`);
      let curKeySeed = await fs.readJSON(keySeedPath);
      const wallet = Wallet.fromMnemonic(curKeySeed.secret);
      curKeySeed.privateKey = wallet._signingKey().privateKey.toLowerCase().replace("0x", "");
      curKeySeed.publicKey = wallet._signingKey().publicKey.toLowerCase().replace("0x", "");
      curKeySeed.compressedPublicKey = wallet._signingKey().compressedPublicKey.toLowerCase().replace("0x", "");
      curKeySeed.address = wallet.address;
      curKeySeed.bip39Address = ethToBech32(wallet.address, "quarix");
      curKeySeed.valAddress = ethToBech32(wallet.address, "quarixvaloper");
      await fs.outputJson(keySeedPath, curKeySeed, { spaces: 2 });
    }

    const account = { "@type": "/ethermint.types.v1.EthAccount", base_account: { address: ""}, code_hash: "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" };
    const balance = { address: "", coins: [{ denom: "aqrx", amount: "0" }] };

    let investmentProgramPools = [
      { current_staking: "0", details: "For Test IPP1", id: "0", max_staking: "1000000000000000000000", name: "IPP1", royalty_fee: "0.100000000000000000", voting_weight: "2.000000000000000000" },
      { current_staking: "0", details: "For Test IPP2", id: "1", max_staking: "1000000000000000000000", name: "IPP2", royalty_fee: "0.200000000000000000", voting_weight: "1.000000000000000000" },
    ];
    const ippId = String(investmentProgramPools.length);
    let allocateInvestmentProgramPools = [];
    for (let i = 0; i < validators; i++) {
      const keySeedPath = path.join(nodesDir, `node${i}/evmosd/key_seed.json`);
      let curKeySeed = await fs.readJSON(keySeedPath);
      allocateInvestmentProgramPools.push({ ipp_id: String(i % 2), validator_address: curKeySeed.valAddress });
    }

    for (let i = 0; i < nodesCount; i++) {
      let accounts = [];
      let balances = [];
      if (Array.isArray(preMineAccounts)) {
        for (const address of preMineAccounts) {
          accounts.push(Object.assign(JSON.parse(JSON.stringify(account)), { base_account: { address } }));
          balances.push(Object.assign(JSON.parse(JSON.stringify(balance)), { address }));
        }
      }
      // const evmosCoin = {
      //   denom: "akgas",
      //   amount: "0",
      // };

      const genesisPath = path.join(nodesDir, `node${i}/evmosd/config/genesis.json`);
      let genesis = await fs.readJSON(genesisPath);
      let appState = genesis.app_state;
      appState.auth.accounts.push(...accounts);
      appState.bank.balances.push(...balances);
      if (commonNode > 0) {
        for (let i = nodesCount - commonNode; i < nodesCount; i++) {
          const keySeedPath = path.join(nodesDir, `node${i}/evmosd/key_seed.json`);
          const curKeySeed = await fs.readJSON(keySeedPath);
          const address = curKeySeed.bip39Address;
          appState.auth.accounts.push(Object.assign(JSON.parse(JSON.stringify(account)), { base_account: { address } }));
          appState.bank.balances.push(Object.assign(JSON.parse(JSON.stringify(balance)), { address }));
        }
      }

      for (let balances of appState.bank.balances) {
        // use balances.coins.unshift(evmosCoin) will modify appState.bank.balances[0].coins[1]
        balances.coins.unshift({
          denom: "aqare",
          amount: "0",
        });
      }

      for (let balances of appState.bank.balances) {
        for (let coin of balances.coins) {
          coin.amount = preMinePerAccount;
        }
      }

      if (fixedFirstValidator) {
        appState.auth.accounts[0].base_account.address = keySeed.bip39Address;
        appState.bank.balances[0].address = keySeed.bip39Address;
        appState.genutil.gen_txs[0] = createValidator;
      }

      // Use zero address to occupy the first account, Because of account_ Accounts with number 0 cannot send Cosmos transactions
      appState.auth.accounts.unshift(Object.assign(JSON.parse(JSON.stringify(account)), { base_account: { address: "quarix1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqcl7sy7" } }));

      appState.staking.investment_program_pools = investmentProgramPools;
      appState.staking.allocate_investment_program_pools = allocateInvestmentProgramPools;
      appState.staking.ipp_id = ippId;
      appState.evm.accounts = evmAccounts;
      appState.auth.accounts.push(...authAccounts)

      const genesisCfg = config.genesisCfg;
      if (Array.isArray(genesisCfg)) {
        for (const cfg of genesisCfg) {
          eval("genesis." + cfg);
        }
      }

      await fs.outputJson(genesisPath, genesis, { spaces: 2 });
    }

    // update app.toml and config.toml and client.toml
    for (let i = 0; i < nodesCount; i++) {
      let data;
      const appConfigPath = path.join(nodesDir, `node${i}/evmosd/config/app.toml`);
      data = await fs.readFile(appConfigPath, "utf8");
      data = updatePorts(data, app.port, i);
      data = updateCfg(data, app.cfg);
      await fs.writeFile(appConfigPath, data);

      const configPath = path.join(nodesDir, `node${i}/evmosd/config/config.toml`);
      data = await fs.readFile(configPath, "utf8");
      data = updatePorts(data, tendermint.port, i);
      // replace persistent_peers
      let peers = [];
      const p2pPort = tendermint.port["p2p.laddr"];
      for (let j = 0; j < nodesCount && nodesCount > 1; j++) {
        if (i != j) {
          peers.push(`${nodeIds[j]}@127.0.0.1:${p2pPort + j}`);
        }
      }
      tendermint.cfg["p2p.persistent_peers"] = `"${peers.join()}"`;
      data = updateCfg(data, tendermint.cfg);
      await fs.writeFile(configPath, data);

      const clientConfigPath = path.join(nodesDir, `node${i}/evmosd/config/client.toml`);
      data = clientCfg;
      data = data.replace("26657", tendermint.port["rpc.laddr"] + i + "");
      await fs.writeFile(clientConfigPath, data);
    }

    if (ibc.enable) {
      await fs.ensureFile(path.join(rlyHome, "config/config.yaml"));
      await fs.writeFile(path.join(rlyHome, "config/config.yaml"), rlyCfg);

      let keySeed;
      keySeed = await fs.readJSON(path.join(nodesDir, `node0/evmosd/key_seed.json`));
      await execPromis(`${rlyCmd} keys restore ibc-0 testkey "${keySeed.secret}" --coin-type 60 --home ${rlyHome}`, { cwd: curDir });
      keySeed = await fs.readJSON(`${gaiaHome}/key_seed.json`);
      await execPromis(`${rlyCmd} keys restore ibc-1 testkey "${keySeed.mnemonic}" --home ${rlyHome}`, { cwd: curDir });
    }

    // 生成启动命令脚本
    let vbsStart = platform == "win32" ? `set ws=WScript.CreateObject("WScript.Shell")\n` : `#!/bin/bash\n`;
    let vbsStop = platform == "win32" ? `set ws=WScript.CreateObject("WScript.Shell")\n` : `#!/bin/bash\n`;
    for (let i = 0; i < nodesCount; i++) {
      let p2pPort = tendermint.port["p2p.laddr"] + i;
      let start = (platform == "win32" ? "" : "#!/bin/bash\n") + (isNohup && platform !== "win32" ? "nohup " : "") + (platform !== "win32" ? "./" : "") + `${evmosd} start --keyring-backend test --home ./node${i}/evmosd/` + (isNohup && platform !== "win32" ? ` >./evmos${i}.log 2>&1 &` : "");
      let stop =
        platform == "win32"
          ? `@echo off
for /f "tokens=5" %%i in ('netstat -ano ^| findstr 0.0.0.0:${p2pPort}') do set PID=%%i
taskkill /F /PID %PID%`
          : platform == "linux"
          ? `pid=\`netstat -anp | grep :::${p2pPort} | awk '{printf $7}' | cut -d/ -f1\`;
    kill -15 $pid`
          : `pid=\`lsof -i :${p2pPort} | grep evmosd | grep LISTEN | awk '{printf $2}'|cut -d/ -f1\`;
    if [ "$pid" != "" ]; then kill -15 $pid; fi`;
      let startPath = path.join(nodesDir, `start${i}.` + (platform == "win32" ? "bat" : "sh"));
      let stopPath = path.join(nodesDir, `stop${i}.` + (platform == "win32" ? "bat" : "sh"));
      await fs.writeFile(startPath, start);
      await fs.writeFile(stopPath, stop);

      if (platform == "win32") {
        vbsStart += `ws.Run ".\\start${i}.bat",0\n`;
        vbsStop += `ws.Run ".\\stop${i}.bat",0\n`;
      } else {
        vbsStart += `./start${i}.sh\n`;
        vbsStop += `./stop${i}.sh\n`;
        await fs.chmod(startPath, 0o777);
        await fs.chmod(stopPath, 0o777);
      }
    }

    if (ibc.enable) {
      let start = (platform == "win32" ? "" : "#!/bin/bash\n") + (isNohup && platform !== "win32" ? "nohup " : "") + `${gaiadCmd} start --home ./gaia` + (isNohup && platform !== "win32" ? ` >./gaia.log 2>&1 &` : "");
      let stop =
        platform == "win32"
          ? `@echo off
for /f "tokens=5" %%i in ('netstat -ano ^| findstr 0.0.0.0:${gaiaP2pPort}') do set PID=%%i
taskkill /F /PID %PID%`
          : platform == "linux"
          ? `pid=\`netstat -anp | grep :::${gaiaP2pPort} | awk '{printf $7}' | cut -d/ -f1\`;
    kill -15 $pid`
          : `pid=\`lsof -i :${gaiaP2pPort} | grep ${gaiad} | grep LISTEN | awk '{printf $2}' | cut -d/ -f1\`;
    if [ "$pid" != "" ]; then kill -15 $pid; fi`;
      let startPath = path.join(nodesDir, platform == "win32" ? "startGaia.bat" : "startGaia.sh");
      let stopPath = path.join(nodesDir, platform == "win32" ? "stopGaia.bat" : "stopGaia.sh");
      await fs.writeFile(startPath, start);
      await fs.writeFile(stopPath, stop);

      if (platform == "win32") {
        vbsStart += `ws.Run ".\\startGaia.bat",0\n`;
        vbsStop += `ws.Run ".\\stopGaia.bat",0\n`;
      } else {
        vbsStart += `./startGaia.sh\n`;
        vbsStop += `./stopGaia.sh\n`;
        await fs.chmod(startPath, 0o777);
        await fs.chmod(stopPath, 0o777);
      }
    }
    if (ibc.enable) {
      const sleep3s = platform == "win32" ? `TIMEOUT /T 3 /NOBREAK` : `#!/bin/bash\nsleep 3`;
      const nohubStr = isNohup && platform !== "win32" ? "nohup" : "";
      const nohubLog = isNohup && platform !== "win32" ? `>./relayer.log 2>&1 &` : "";
      let start = `${sleep3s}\n${nohubStr} ${rlyCmd} tx link demo -d -t 3s --client-tp 500s --home ./relayer ${nohubLog}`;
      // start = `${start}\n${nohubStr} ${rlyCmd} start --home ./relayer ${nohubLog}`;
      let stop =
        platform == "win32"
          ? `@echo off
for /f "tokens=5" %%i in ('netstat -ano ^| findstr ${rly}') do set PID=%%i
taskkill /F /PID %PID%`
          : platform == "linux"
          ? `pid=\`ps -ef | grep "rly start" | grep -v grep | awk '{printf $2}' | cut -d/ -f1\`;
    kill -15 $pid`
          : `pid=\`ps -ef | grep "rly start" | grep -v grep | awk '{printf $2}' | cut -d/ -f1\`;
    if [ "$pid" != "" ]; then kill -15 $pid; fi`;
      let startPath = path.join(nodesDir, platform == "win32" ? "startRly.bat" : "startRly.sh");
      let stopPath = path.join(nodesDir, platform == "win32" ? "stopRly.bat" : "stopRly.sh");
      let ibcTransrerPath = path.join(nodesDir, platform == "win32" ? "ibcTransrer.bat" : "ibcTransrer.sh");
      await fs.writeFile(startPath, start);
      await fs.writeFile(stopPath, stop);
      await fs.writeFile(ibcTransrerPath, ibcTransfer);

      if (platform == "win32") {
        vbsStart += `ws.Run ".\\startRly.bat",0\n`;
        // vbsStop += `ws.Run ".\\stopRly.bat",0\n`;
      } else {
        vbsStart += `./startRly.sh\n`;
        // vbsStop += `./stopRly.sh\n`;
        await fs.chmod(startPath, 0o777);
        await fs.chmod(stopPath, 0o777);
        await fs.chmod(ibcTransrerPath, 0o777);
      }
    }

    // 生成总的启动脚本
    let startAllPath = path.join(nodesDir, `startAll.` + (platform == "win32" ? "vbs" : "sh"));
    let stopAllPath = path.join(nodesDir, `stopAll.` + (platform == "win32" ? "vbs" : "sh"));
    await fs.writeFile(startAllPath, vbsStart);
    await fs.writeFile(stopAllPath, vbsStop);
    if (!(platform == "win32")) {
      await fs.chmod(startAllPath, 0o777);
      await fs.chmod(stopAllPath, 0o777);
    }

    if (isStart) {
      console.log("Start all evmosd node under the folder nodes");
      await execPromis(scriptStart, { cwd: nodesDir }); // 不管怎样先执行一下停止
    }
  } catch (error) {
    console.log("error", error);
  }
};

init();
